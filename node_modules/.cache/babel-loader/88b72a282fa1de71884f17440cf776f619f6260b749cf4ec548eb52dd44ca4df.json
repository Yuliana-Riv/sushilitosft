{"ast":null,"code":"'use strict';\n\nimport api from '@/api/api';\nimport userService from '../../services/user.service';\nimport ncryptService from '../../services/ncrypt.service';\nconst SET_TOKEN = 'SET_TOKEN',\n  SET_IDENTITY = 'SET_IDENTITY';\nexport default {\n  namespaced: true,\n  state: {\n    token: '',\n    identity: {}\n  },\n  getters: {\n    getToken(state) {\n      return state.token;\n    },\n    getIdentity(state) {\n      return state.identity;\n    }\n  },\n  mutations: {\n    [SET_TOKEN](state, payload) {\n      state.token = payload;\n    },\n    [SET_IDENTITY](state, payload) {\n      state.identity = payload;\n    }\n  },\n  actions: {\n    async login({\n      commit\n    }, payload) {\n      try {\n        const _pk = ncryptService._createPubToken();\n        let headers = {\n          \"_pk\": _pk\n        };\n        let response = await api.login(payload, headers);\n        localStorage.removeItem(\"tkn\");\n        localStorage.removeItem(\"lastv\");\n        localStorage.removeItem('ath'); //limpiar el localstorage\n\n        if (response.data.status == 'success') {\n          commit(SET_TOKEN, response.data.result);\n          localStorage.setItem(\"tkn\", response.data.result);\n        }\n        return response.data;\n      } catch (error) {\n        return {\n          status: 'error',\n          message: 'Ha ocurrido un error al intentar iniciar sesión.',\n          result: ''\n        };\n      }\n    },\n    async getData({\n      commit\n    }) {\n      try {\n        let response = await userService.getData();\n        if (response.status == 'success') {\n          //el token si fue valido y se obtuvo el usuario.\n          commit(SET_IDENTITY, response.result);\n        }\n        return response;\n      } catch (error) {\n        return {\n          status: 'error',\n          message: 'Ha ocurrido un error.',\n          result: ''\n        };\n      }\n    },\n    async resendCode({\n      commit\n    }, payload) {\n      try {\n        const _pk = ncryptService._createPubToken();\n        let headers = {\n          \"_pk\": _pk\n        };\n        let response = await api.resendCode(payload, headers);\n        return response;\n      } catch (error) {\n        // console.log(error)\n      }\n    },\n    async enviarMailContacto({\n      commit\n    }, payload) {\n      try {\n        const _pk = ncryptService._createPubToken();\n        let headers = {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          \"_pk\": _pk\n        };\n        let response = await api.enviarMailContacto(payload, headers);\n        return response.data;\n      } catch (error) {\n        //console.log(error);\n      }\n    },\n    logout({\n      commit\n    }) {\n      localStorage.removeItem(\"tkn\");\n      localStorage.removeItem(\"lastv\");\n      localStorage.removeItem('ath');\n      commit(SET_IDENTITY, null);\n      commit(SET_TOKEN, null);\n    }\n  }\n};","map":{"version":3,"names":["api","userService","ncryptService","SET_TOKEN","SET_IDENTITY","namespaced","state","token","identity","getters","getToken","getIdentity","mutations","payload","actions","login","commit","_pk","_createPubToken","headers","response","localStorage","removeItem","data","status","result","setItem","error","message","getData","resendCode","enviarMailContacto","logout"],"sources":["C:/Users/Dell Latitude/Documents/GitHub/sushilito_ft/src/store/modules/admin.js"],"sourcesContent":["'use strict'\r\n\r\nimport api from '@/api/api';\r\nimport userService from '../../services/user.service';\r\nimport ncryptService from '../../services/ncrypt.service'\r\n\r\nconst SET_TOKEN     = 'SET_TOKEN',\r\n      SET_IDENTITY  = 'SET_IDENTITY';\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state:{\r\n        token: '',\r\n        identity: { },\r\n       \r\n    },\r\n    getters: {\r\n        getToken(state){\r\n            return state.token;\r\n        },\r\n        getIdentity(state){\r\n            return state.identity;\r\n        }\r\n    },\r\n    mutations: {\r\n        [SET_TOKEN](state, payload){\r\n            state.token = payload;\r\n        },\r\n        [SET_IDENTITY](state, payload){\r\n            state.identity = payload;\r\n        }\r\n    },\r\n    actions:{\r\n        async login({commit}, payload) {\r\n         \r\n            try {\r\n\r\n                const _pk = ncryptService._createPubToken()\r\n                let headers = { \"_pk\":_pk };\r\n                let response = await api.login(payload, headers);\r\n                \r\n                localStorage.removeItem(\"tkn\");\r\n                localStorage.removeItem(\"lastv\");\r\n                localStorage.removeItem('ath')  //limpiar el localstorage\r\n\r\n                if(response.data.status =='success'){\r\n                    commit(SET_TOKEN, response.data.result);\r\n                    localStorage.setItem(\"tkn\", response.data.result);\r\n                }\r\n              \r\n                return response.data;\r\n            } catch (error) {\r\n                return {\r\n                    status:'error',\r\n                    message:'Ha ocurrido un error al intentar iniciar sesión.',\r\n                    result:''\r\n                }\r\n            }\r\n        },\r\n\r\n        async getData({commit}){\r\n            try {\r\n                \r\n                let response = await userService.getData()\r\n\r\n                if(response.status =='success'){ //el token si fue valido y se obtuvo el usuario.\r\n                    commit(SET_IDENTITY, response.result);\r\n                  \r\n                }\r\n              \r\n                return response;\r\n                \r\n               \r\n            } catch (error) {\r\n                return {\r\n                    status:'error',\r\n                    message:'Ha ocurrido un error.',\r\n                    result:''\r\n                }\r\n            }\r\n        },\r\n\r\n        async resendCode({commit}, payload) {\r\n         \r\n        try {\r\n            const _pk = ncryptService._createPubToken()\r\n            let headers = {  \"_pk\":_pk};\r\n            let response = await api.resendCode(payload, headers);\r\n           \r\n            return response;\r\n        } catch (error) {\r\n          // console.log(error)\r\n        }\r\n      },\r\n\r\n   \r\n     \r\n      async enviarMailContacto({commit}, payload) {\r\n           \r\n        try {\r\n            const _pk = ncryptService._createPubToken()\r\n            let headers = { \"Content-Type\": \"application/x-www-form-urlencoded\", \"_pk\": _pk };\r\n            let response = await api.enviarMailContacto(payload, headers);\r\n    \r\n            return response.data;\r\n        } catch (error) {\r\n            //console.log(error);\r\n        }\r\n    },\r\n       \r\n        \r\n        logout({commit}) {          \r\n            localStorage.removeItem(\"tkn\");  \r\n            localStorage.removeItem(\"lastv\"); \r\n            localStorage.removeItem('ath')         \r\n            commit(SET_IDENTITY, null);\r\n            commit(SET_TOKEN, null);            \r\n        },\r\n        \r\n     \r\n   \r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}