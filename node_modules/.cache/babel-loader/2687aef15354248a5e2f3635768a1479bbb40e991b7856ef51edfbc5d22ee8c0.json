{"ast":null,"code":"import dayjs from 'dayjs';\nimport CryptoJS from \"crypto-js\";\nconst _keypub = \"%h56546346&h554hF-Dp67Mf223tadaH\";\nexport default {\n  _createPubToken() {\n    let result = '';\n    try {\n      const data = {\n        iat: dayjs().format(),\n        //fecha en la que se ha creado el token\n        exp: dayjs().add(1, 'minute').format() // fecha de expiracion del token, en este caso expira en 30 dias.\n      };\n\n      const str = JSON.stringify(data);\n      result = CryptoJS.AES.encrypt(str, _keypub).toString();\n    } catch (err) {\n      //console.log(err.message)\n    }\n    return result;\n  },\n  _decryptPubData(data) {\n    let result = '';\n    try {\n      var bytes = CryptoJS.AES.decrypt(data, _keypub);\n      result = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    } catch (err) {\n      //console.log(err.message)\n    }\n    return result;\n  },\n  _encryptPubData(data) {\n    let result = '';\n    try {\n      const str = JSON.stringify(data);\n      result = CryptoJS.AES.encrypt(str, _keypub).toString();\n    } catch (err) {\n      console.log(err.message + '[3]');\n    }\n    return result;\n  }\n};","map":{"version":3,"names":["dayjs","CryptoJS","_keypub","_createPubToken","result","data","iat","format","exp","add","str","JSON","stringify","AES","encrypt","toString","err","_decryptPubData","bytes","decrypt","parse","enc","Utf8","_encryptPubData","console","log","message"],"sources":["C:/Users/Dell Latitude/Documents/GitHub/sushilito_ft/src/services/ncrypt.service.js"],"sourcesContent":["\r\nimport dayjs from 'dayjs';\r\n\r\nimport CryptoJS  from \"crypto-js\";\r\nconst _keypub = \"%h56546346&h554hF-Dp67Mf223tadaH\";\r\n\r\n\r\nexport default {\r\n  \r\n\r\n\r\n  _createPubToken(){\r\n    let result =''\r\n    try{\r\n        const data ={\r\n            iat: dayjs().format(), //fecha en la que se ha creado el token\r\n            exp: dayjs().add(1, 'minute').format()// fecha de expiracion del token, en este caso expira en 30 dias.\r\n        };\r\n\r\n        const str = JSON.stringify(data)\r\n        result  = CryptoJS.AES.encrypt(str, _keypub).toString();\r\n\r\n    }catch(err){\r\n         //console.log(err.message)\r\n    }\r\n\r\n    return result\r\n  },\r\n\r\n  _decryptPubData(data){\r\n    let result =''\r\n    try{\r\n       var bytes  = CryptoJS.AES.decrypt(data, _keypub);\r\n       result = JSON.parse(bytes.toString(CryptoJS.enc.Utf8)) \r\n\r\n    }catch(err){\r\n         //console.log(err.message)\r\n    }\r\n\r\n    return result\r\n  },\r\n\r\n  _encryptPubData(data){\r\n    let result =''\r\n    try{\r\n\r\n        const str = JSON.stringify(data)\r\n        result  = CryptoJS.AES.encrypt(str, _keypub).toString();\r\n\r\n    }catch(err){\r\n         console.log(err.message  + '[3]')\r\n        \r\n    }\r\n\r\n    return result\r\n  }\r\n  \r\n\r\n\r\n\r\n\r\n\r\n};\r\n\r\n"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAOC,QAAQ,MAAO,WAAW;AACjC,MAAMC,OAAO,GAAG,kCAAkC;AAGlD,eAAe;EAIbC,eAAeA,CAAA,EAAE;IACf,IAAIC,MAAM,GAAE,EAAE;IACd,IAAG;MACC,MAAMC,IAAI,GAAE;QACRC,GAAG,EAAEN,KAAK,EAAE,CAACO,MAAM,EAAE;QAAE;QACvBC,GAAG,EAAER,KAAK,EAAE,CAACS,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAACF,MAAM,EAAE;MAC1C,CAAC;;MAED,MAAMG,GAAG,GAAGC,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC;MAChCD,MAAM,GAAIH,QAAQ,CAACY,GAAG,CAACC,OAAO,CAACJ,GAAG,EAAER,OAAO,CAAC,CAACa,QAAQ,EAAE;IAE3D,CAAC,QAAMC,GAAG,EAAC;MACN;IAAA;IAGL,OAAOZ,MAAM;EACf,CAAC;EAEDa,eAAeA,CAACZ,IAAI,EAAC;IACnB,IAAID,MAAM,GAAE,EAAE;IACd,IAAG;MACA,IAAIc,KAAK,GAAIjB,QAAQ,CAACY,GAAG,CAACM,OAAO,CAACd,IAAI,EAAEH,OAAO,CAAC;MAChDE,MAAM,GAAGO,IAAI,CAACS,KAAK,CAACF,KAAK,CAACH,QAAQ,CAACd,QAAQ,CAACoB,GAAG,CAACC,IAAI,CAAC,CAAC;IAEzD,CAAC,QAAMN,GAAG,EAAC;MACN;IAAA;IAGL,OAAOZ,MAAM;EACf,CAAC;EAEDmB,eAAeA,CAAClB,IAAI,EAAC;IACnB,IAAID,MAAM,GAAE,EAAE;IACd,IAAG;MAEC,MAAMM,GAAG,GAAGC,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC;MAChCD,MAAM,GAAIH,QAAQ,CAACY,GAAG,CAACC,OAAO,CAACJ,GAAG,EAAER,OAAO,CAAC,CAACa,QAAQ,EAAE;IAE3D,CAAC,QAAMC,GAAG,EAAC;MACNQ,OAAO,CAACC,GAAG,CAACT,GAAG,CAACU,OAAO,GAAI,KAAK,CAAC;IAEtC;IAEA,OAAOtB,MAAM;EACf;AAOF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}